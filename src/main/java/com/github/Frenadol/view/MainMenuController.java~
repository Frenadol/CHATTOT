package com.github.Frenadol.view;

import com.github.Frenadol.App;
import com.github.Frenadol.model.User;
import com.github.Frenadol.utils.SessionManager;
import com.github.Frenadol.utils.XmlReader;
import javafx.beans.property.SimpleObjectProperty;
import javafx.beans.property.SimpleStringProperty;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.*;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.AnchorPane;
import javafx.scene.shape.Circle;
import javafx.stage.FileChooser;

import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.net.URL;
import java.util.List;
import java.util.Optional;
import java.util.ResourceBundle;
import java.util.stream.Collectors;

public class MainMenuController implements Initializable {
    @FXML
    private AnchorPane anchorPane;
    @FXML
    private ImageView userImage;
    @FXML
    private TableView<User> usersTable;
    @FXML
    private TableColumn<User, String> nameUserColumn;
    @FXML
    private TableColumn<User, ImageView> imageProfileColumn;
    @FXML
    private Label NameUser;
    @FXML
    private TableView<User> contactsTable;
    @FXML
    private TableColumn<User, String> contactNameColumn;
    @FXML
    private TableColumn<User, ImageView> contactProfileColumn;
    private ObservableList<User> contactList = FXCollections.observableArrayList();
    @FXML
    private Button addContactButton;
    @FXML
    private Button sendMessageButton;
    @FXML
    private Button BackButton;
    @FXML
    private Button changeNameButton;
    @FXML
    private Button changePhotoButton;

    private ObservableList<User> userList = FXCollections.observableArrayList();
    String filePath = "UsersData.xml";

    /**
     * Navigates back to the primary view.
     *
     * @throws IOException if there is an issue changing the view.
     */
    public void goBack() throws IOException {
        App.setRoot("Primary");
    }

    /**
     * Initializes the controller by loading the user list and the current user image.
     * Sets up cell value factories for user tables and loads contacts for the current user.
     *
     * @param url the location used to resolve relative paths for the root object,
     *            or null if the location is not known.
     * @param resources the resources used to localize the root object, or null if the
     *                  root object was not localized.
     */
    @Override
    public void initialize(URL url, ResourceBundle resources) {
        ListUsers();
        loadCurrentUserImage();

        nameUserColumn.setCellValueFactory(cellData -> new SimpleStringProperty(cellData.getValue().getName()));
        imageProfileColumn.setCellValueFactory(cellData -> {
            byte[] visualData = cellData.getValue().getProfileImage();
            if (visualData != null && visualData.length > 0) {
                ByteArrayInputStream bis = new ByteArrayInputStream(visualData);
                Image image = new Image(bis);
                ImageView imageView = new ImageView(image);
                imageView.setFitWidth(120);
                imageView.setFitHeight(100);
                applyCircularClip(imageView);
                return new SimpleObjectProperty<>(imageView);
            } else {
                ImageView imageView = new ImageView();
                imageView.setFitWidth(120);
                imageView.setFitHeight(100);
                applyCircularClip(imageView);
                return new SimpleObjectProperty<>(imageView);
            }
        });

        contactNameColumn.setCellValueFactory(cellData -> new SimpleStringProperty(cellData.getValue().getName()));
        contactProfileColumn.setCellValueFactory(cellData -> {
            byte[] visualData = cellData.getValue().getProfileImage();
            if (visualData != null && visualData.length > 0) {
                ByteArrayInputStream bis = new ByteArrayInputStream(visualData);
                Image image = new Image(bis);
                ImageView imageView = new ImageView(image);
                imageView.setFitWidth(120);
                imageView.setFitHeight(120);
                applyCircularClip(imageView);
                return new SimpleObjectProperty<>(imageView);
            } else {
                ImageView imageView = new ImageView();
                imageView.setFitWidth(120);
                imageView.setFitHeight(100);
                applyCircularClip(imageView);
                return new SimpleObjectProperty<>(imageView);
            }
        });

        User currentUser = SessionManager.getInstance().getCurrentUser();
        if (currentUser != null) {
            NameUser.setText(currentUser.getName());
            loadContactsForCurrentUser();
        }

        changeNameButton.setOnAction(event -> changeUserName());

        changePhotoButton.setOnAction(event -> changeUserPhoto());
    }

    /**
     * Loads users from the XML file and populates the users table,
     * filtering out the current user and their contacts.
     */
    private void ListUsers() {
        List<User> users = XmlReader.getUsersFromXML(filePath);
        User currentUser = SessionManager.getInstance().getCurrentUser();

        if (users.isEmpty()) {
            System.out.println("No users found in XML.");
        } else {
            System.out.println("Users loaded: " + users.size());
        }

        if (currentUser != null) {
            List<User> contacts = currentUser.getContacts();
            users.removeIf(user -> user.getName().equals(currentUser.getName()) || contacts.stream().anyMatch(contact -> contact.getName().equals(user.getName())));
        }

        this.userList = FXCollections.observableArrayList(users);
        usersTable.setItems(userList);
    }

    /**
     * Confirms and adds the selected contact to the current user's contact list.
     * Displays a confirmation dialog before adding the contact.
     */
    @FXML
    private void confirmAndAddContact() {
        User selectedContact = usersTable.getSelectionModel().getSelectedItem();

        if (selectedContact != null) {
            User currentUser = SessionManager.getInstance().getCurrentUser();

            if (currentUser != null && currentUser.getContacts().contains(selectedContact)) {
                showAlert("This contact is already in your list.");
                return;
            }

            Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
            alert.setTitle("Confirmation to Add");
            alert.setHeaderText("You are about to add " + selectedContact.getName() + " as a contact");
            alert.setContentText("Are you sure you want to add this user to your contacts?");

            Optional<ButtonType> result = alert.showAndWait();
            if (result.isPresent() && result.get() == ButtonType.OK) {
                if (currentUser != null) {
                    if (!currentUser.getContacts().contains(selectedContact)) {
                        currentUser.addContactToList(selectedContact);

                        List<User> users = XmlReader.getUsersFromXML(filePath);
                        if (users != null) {
                            for (User user : users) {
                                if (user.getName().equals(currentUser.getName())) {
                                    List<User> existingContacts = user.getContacts();
                                    if (!existingContacts.contains(selectedContact)) {
                                        existingContacts.add(selectedContact);
                                    }
                                    user.setContacts(existingContacts);
                                    break;
                                }
                            }

                            XmlReader.saveUsersToXML(users, filePath);
                        }

                        showAlert("Contact successfully added.");

                        loadContactsForCurrentUser();

                        userList.remove(selectedContact);
                        usersTable.setItems(userList);
                    } else {
                        showAlert("This contact is already in your list.");
                    }
                }
            }
        } else {
            showAlert("Please select a user to add as a contact.");
        }
    }

    /**
     * Loads the contacts for the current user and populates the contacts table.
     */
    private void loadContactsForCurrentUser() {
        User currentUser = SessionManager.getInstance().getCurrentUser();
        if (currentUser != null) {
            List<User> users = XmlReader.getUsersFromXML(filePath);
            for (User user : users) {
                if (user.getName().equals(currentUser.getName())) {
                    contactList.clear();
                    contactList.addAll(user.getContacts());
                    contactsTable.setItems(contactList);
                    break;
                }
            }
        }
    }

    /**
     * Initiates a chat with the selected contact if they are mutually in each other's contact lists.
     */
    @FXML
    private void chattedWithContact() {
        try {
            User selectedContact = contactsTable.getSelectionModel().getSelectedItem();
            User currentUser = SessionManager.getInstance().getCurrentUser();

            if (selectedContact != null && currentUser != null) {
                List<User> allUsers = XmlReader.getUsersFromXML(filePath);

                User updatedSelectedContact = allUsers.stream().filter(user -> user.getName().equals(selectedContact.getName())).findFirst().orElse(null);
                User updatedCurrentUser = allUsers.stream().filter(user -> user.getName().equals(currentUser.getName())).findFirst().orElse(null);

                if (updatedSelectedContact != null && updatedCurrentUser != null) {
                    boolean currentUserHasContact = updatedCurrentUser.getContacts().contains(updatedSelectedContact);
                    boolean contactHasCurrentUser = updatedSelectedContact.getContacts().contains(updatedCurrentUser);

                    if (currentUserHasContact && contactHasCurrentUser) {
                        SessionManager.getInstance().setSelectedUser(updatedSelectedContact);
                        showAlert("Chat started with " + updatedSelectedContact.getName());
                        App.setRoot("Chat");
                    } else {
                        showAlert("You cannot chat with " + updatedSelectedContact.getName() + " because you do not have each other added as contacts.");
                    }
                } else {
                    showAlert("Error: User or selected contact not found.");
                }
            } else {
                showAlert("Please select a contact to chat with.");
            }
        } catch (Exception e) {
            showAlert("Error starting chat: " + e.getMessage());
        }
    }

    /**
     * Loads the current user's profile image and displays it in the UI.
     */
    private void loadCurrentUserImage() {
        User currentUser = SessionManager.getInstance().getCurrentUser();
        if (currentUser != null) {
            List<User> users = XmlReader.getUsersFromXML(filePath);
            for (User user : users) {
                if (user.getName().equals(currentUser.getName())) {
                    byte[] visualData = user.getProfileImage();
                    if (visualData != null && visualData.length > 0) {
                        ByteArrayInputStream bis = new ByteArrayInputStream(visualData);
                        Image image = new Image(bis);
                        userImage.setImage(image);
                        applyCircularClip(userImage);
                    }
                    break;
                }
            }
        }
    }

    /**
     * Applies a circular clip to the provided ImageView.
     *
     * @param imageView the ImageView to which the circular clip will be applied.
     */
    private void applyCircularClip(ImageView imageView) {
        Circle clip = new Circle(imageView.getFitWidth() / 2, imageView.getFitHeight() / 2, Math.min(imageView.getFitWidth(), imageView.getFitHeight()) / 2);
        imageView.setClip(clip);
    }

    /**
     * Displays an information alert with the specified message.
     *
     * @param message the message to display in the alert.
     */
    private void showAlert(String message) {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setContentText(message);
        alert.show();
    }

    /**
     * Opens a dialog to change the current user's name.
     * Validates that the new name is not empty and is different from the current name.
     */
    @FXML
    private void changeUserName() {
        User currentUser = SessionManager.getInstance().getCurrentUser();
        if (currentUser != null) {
            TextInputDialog dialog = new TextInputDialog(currentUser.getName());
            dialog.setTitle("Change Name");
            dialog.setHeaderText("Enter the new name for the user:");
            Optional<String> result = dialog.showAndWait();

            if (result.isPresent() && !result.get().trim().isEmpty()) {
                String newName = result.get().trim();

                if (newName.equals(currentUser.getName())) {
                    showAlert("The new name must be different from the current one.");
                } else {
                    currentUser.setName(newName);
                    NameUser.setText(newName);
                    updateUserInXML(currentUser);
                    showAlert("Name changed successfully.");
                }
            } else {
                showAlert("The name cannot be empty.");
            }
        }
    }

    /**
     * Opens a file chooser dialog to select a new user photo,
     * updates the user's profile image, and saves the changes to the XML file.
     */
    @FXML
    private void changeUserPhoto() {
        User currentUser = SessionManager.getInstance().getCurrentUser();
        if (currentUser != null) {
            FileChooser fileChooser = new FileChooser();
            fileChooser.setTitle("Select Image");
            fileChooser.getExtensionFilters().add(new FileChooser.ExtensionFilter("Images", "*.png", "*.jpg", "*.jpeg"));

            File file = fileChooser.showOpenDialog(anchorPane.getScene().getWindow());
            if (file != null) {
                try (FileInputStream fis = new FileInputStream(file)) {
                    byte[] imageData = fis.readAllBytes();
                    currentUser.setProfileImage(imageData);
                    loadCurrentUserImage();
                    updateUserInXML(currentUser);
                    showAlert("User photo changed successfully.");
                } catch (IOException e) {
                    showAlert("Error loading image: " + e.getMessage());
                }
            }
        }
    }

    /**
     * Updates the user information in the XML file with the changes made.
     *
     * @param user the user whose information will be updated in the XML file.
     */
    private void updateUserInXML(User user) {
        List<User> users = XmlReader.getUsersFromXML(filePath);
        for (User u : users) {
            if (u.getName().equals(user.getName())) {
                u.setProfileImage(user.getProfileImage());
                u.setName(user.getName());
                break;
            }
        }
        XmlReader.saveUsersToXML(users, filePath);
    }
}
